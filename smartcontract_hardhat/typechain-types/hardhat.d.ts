/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AERC20__factory>;
    getContractFactory(
      name: "AERC20Extendable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AERC20Extendable__factory>;
    getContractFactory(
      name: "AERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AERC20Pausable__factory>;
    getContractFactory(
      name: "AOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AOwnable__factory>;
    getContractFactory(
      name: "APausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.APausable__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mintable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPausable__factory>;

    getContractAt(
      name: "AERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AERC20>;
    getContractAt(
      name: "AERC20Extendable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AERC20Extendable>;
    getContractAt(
      name: "AERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AERC20Pausable>;
    getContractAt(
      name: "AOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AOwnable>;
    getContractAt(
      name: "APausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.APausable>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mintable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPausable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
